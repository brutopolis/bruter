setf luapi ? `
    terralib.includepath = terralib.includepath .. ";" .. terralib.terrahome .. "/include/terra";

    capi = terralib.includecstring [[
        #include <lua.h>
        #include <lauxlib.h>
        #include <lualib.h>

        // wrappers to import the functions that are macros
        int lua_dostring(lua_State *L, const char *s) { return luaL_dostring(L, s); }
    ]];
    
    for k,v in pairs(capi) do
        -- if contains lua_ print the name
        if string.find(k, "lua_") then
            print(k)
        end
    end

    struct lua_session
    {
        L: &capi.lua_State,
    }

    terra lua_session:eval(code: &int8)
        capi.lua_dostring(self.L, code)
    end

    terra lua_session:close()
        capi.lua_close(self.L)
    end

    return(terra():lua_session
        var L = capi.luaL_newstate()
        capi.luaL_openlibs(L)
        var result:lua_session;
        result.L = L;
        return(result);
    end)

`;

comment test:? `return terra() 
    var sess = br.luapi();
    sess:eval("print('Hello from Lua!')");
    sess:close();
end`;
comment test;
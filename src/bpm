#!/bin/bash

# Variáveis padrão
EXPERIMENTAL=""
OUTPUT=""
OPERATION=""
REPO="https://github.com/jardimdanificado/bpm_packages"
BRANCH=""
ARGS=""

# Função de ajuda
usage() {
    echo "usage: bpm [install|remove|build|new|update] [options]"
    echo "options:"
    echo "  --experimental: use the experimental branch of bruter"
    echo "  --output, -o: specify the output directory"
    echo "  --origin: specify the origin of the project"
    echo "  --branch, -b: specify the branch of the project"
    echo "  --git: specify the git repository"
    echo "  --args: specify the arguments to be passed to the build script"
    echo "  --help, -h: show this help message"
    exit 0
}

# Processando os argumentos
while [ "$#" -gt 0 ]; do
    case "$1" in
        --experimental) EXPERIMENTAL="-b experimental" ;;
        --output|-o) OUTPUT="$2"; shift ;;
        --origin) cp -rf $2 .; shift ;;
        --branch|-b) BRANCH="-b $2"; shift ;;
        --from) REPO="$2"; shift ;;
        --args) ARGS="$2"; shift ;;
        --help|-h) usage ;;
        install|remove|build|update|new|edit) OPERATION="$1"; shift ;;
        *) echo "unknown option: $1"; usage ;;
    esac
    shift
done

# Função para clonar repositórios
clone_repo() {
    git clone $1 $2 --depth 1 $EXPERIMENTAL
}

# Função para construir o projeto
build_project() {
    rm -rf "$OUTPUT" build
    mkdir -p "$OUTPUT"
    [ -d ".bpm" ] || mkdir -p .bpm/packages

    cd .bpm
    [ -d "bruter" ] || clone_repo "https://github.com/jardimdanificado/bruter" "bruter"

    cp -r ../{lib,src,include}/* bruter/

    cd bruter
    source build.sh
    mv build ../../

    [ -n "$OUTPUT" ] && mv build "$OUTPUT" || echo "project built at ./build"
}

# Função para criar novo projeto
create_new_project() {
    [ -z "$OUTPUT" ] && { echo "please provide a name for the new project"; exit 1; }
    [ -d "$OUTPUT" ] && { echo "directory already exists"; exit 1; }

    mkdir -p "$OUTPUT/src" "$OUTPUT/include" "$OUTPUT/lib"
    echo "#include \"bruter.h\"\n\nfunction(example_function)\n{\n    return -1;\n}\n\ninit(example)\n{\n    register_builtin(vm, \"example.function\", example_function);" > "$OUTPUT/lib/example.c"
    echo "package.name: \"$OUTPUT\"\npackage.version: \"0.0.0\"\npackage.description: \"whatever\"" > "$OUTPUT/package.br"
    echo "project created at $OUTPUT"
}

# Função para gerenciar pacotes
manage_package() {
    [ -z "$NAME" ] && { echo "please provide a package name"; exit 1; }
    case "$OPERATION" in
        install)
            [ ! -d ".bpm" ] && mkdir -p .bpm/packages && git clone $REPO .bpm/bpm_repo
            git clone $(bpm-edit repository . url $NAME) .bpm/packages/$NAME
            ;;
        remove)
            rm -rf .bpm/packages/$NAME
            sed -i "/package.dependency: \"$NAME\"/d" package.br
            ;;
        update)
            rm -rf .bpm/bpm_repo
            git clone $(bpm-edit repository . get url) .bpm/bpm_repo
            mv .bpm/bpm_repo/repository.br ./.bpm
            rm -rf .bpm/bpm_repo
            ;;
    esac
}

# Executando operações
case "$OPERATION" in
    build) build_project ;;
    new) create_new_project ;;
    install|remove|update) manage_package ;;
    *) echo "unknown operation"; usage ;;
esac

(20/12/2024) - version 0.7.0

- no more @: operator;
- no more (//) delimiter, use // instead;
- new operators @+, @-, @> and @<;
- proper commentary with // instead of (//) are now possible;
- dycc.c will be moved to a separated repository for libs;

(17/12/2024) - version 0.6.9

- global.* are now part of std.mem as mem.*;
- string delimiter changed from (.) to (@@);
- to keep it simple, do commmand does not deals with scopes or args anymore, its just a eval;
- some new macros, check bruter.h;
- std.c lib rewritten using the new macros;
- some std functions fixed;
- default_parser renamed to parse;
- no more vm->parse;
- rewritten everything related to temporary variables;
- math functions fully rewritten, some removed;
- some cleanup, about 1k lines removed;
- some example removed;
- some README updates;
- this is probably the biggest update so far, lot of code rewritten and removed, yet, it almost dindt broke the api.

(09/12/2024) - version 0.6.8

- new function set global.*;
- new std variable: local, works as a context, its defined each time "do" is called and is destroyed when the function ends, it is a default list, so you can manipulate it with list functions, it also save the pointer to the last local if there was one;
- new function default_interpreter;
- new function default_parser;
- interpret is now vm->interpret and can be replaced;
- parse is now vm->parse and can be replaced;
- dyc is now dycc(dynamic C compiler), which make more sense.
- new example stacky.br;
- new example lib stacky.c

(27/11/2024) - version 0.6.7a

- minor changes;
- no more direct tcc functions(tcc.*), use dyc functions instead;
- if dyc.new receive 2 arguments, the first one will be the extra code(any c code that will be added before the new function), the second one will be the function code;
- some examples updated;
- fixed mem functions not being initialized;
- new function dyc.include, it includes a C file just like a builtin library and return a handler to it, so you can delete it later(it will not delete the hashes created by it, be careful);

(24/11/2024) - version 0.6.7

- renamed all lib functions putting the brl_ prefix to it;
- some cleanup done on header;
- removed os.sleep;
- merged mem.c and os.c into std.c;
- renamed tcc.c to dyc.c (dynamic c);
- dyc.c now has a copy of the header;

(22/11/2024) - version 0.6.5a

- some examples updated;
- new function tcc.add.symbol;

(22/11/2024) - version 0.6.5

- no more direct commands, everything in bruter must be optional, so hardcoded commands are not a thing anymore;
- new lib tcc.c, to compile and run c code on the fly;
- new alias to IntList*: Args;
- (. ) is now a string delimiter;
- (// ) is now a comment delimiter;
- 'repeat', 'while' and 'each' are now separated from 'do';
- processes are no more a thing, they will be back, but in far future(uncomment it from os.c if you want to use it, should work but not officially supported for now);

(12/11/2024) - version 0.6.4b

- fixed the seg fault when calling direct commands without hashtag;
- multiloops.br updated;
- minor change in direct help messages;

(09/11/2024) - version 0.6.4a

- some README updates;
- print functions for bytes and bits added, (..p index) and (...p index);
- removed vscode-extension, it will be moved to other repository;

(09/11/2024) - version 0.6.4

- direct commands (.a args...) are now a thing, they are faster than libs and are hardcoded in the interpreter, can only work with integers;
- direct byte commands (..a args...), a subset of direct commands for bytes, also hardcoded in the interpreter;
- direct bit commands (...a args...), a subset of direct commands for bits, also hardcoded in the interpreter;
- comments are now possible using direct (.# comment);
- removed raw.c, direct commands does the same job, and are faster; 
- new function mem_next;
- new function repl;
- new function direct_parser;
- new function direct_byte_parser;
- new function direct_bit_parser;
- new function std_gindex;
- new exemple pure.br;
- math functions now set result to the first argument, instead of creating a new one;
- readfile and writefile moved from os.c to bruter.c;
- print_element moved from std.c to bruter.c;
- some optimizations;
- build files updated;

(03/11/2024) - version 0.6.3

- math functions fixed;
- new function raw_bytes_set;
- std_math_increment and std_math_decrement can now receive endless amount of arguments, and doesnt return anything anymore;
- loop examples updated;
- some optimizations;

(02/11/2024) - version 0.6.2e

- minor changes;

(01/11/2024) - version 0.6.2d

- new function os_time_now(os.time);
- new function os_time_clock(os.clock);
- new function os_time_sleep(os.sleep);

(01/11/2024) - version 0.6.2c

- TYPE_INTEGER is now a thing;
- new example added;

(31/10/2024) - version 0.6.2b

- minor fixes;
- new function std_hash_get;

(31/10/2024) - version 0.6.2a

- some byte related fixes;

(31/10/2024) - version 0.6.2

- removed std_eval, use std_do instead;
- removed std_loop_repeat, use std_do instead;
- removed std_loop_while, use std_do instead;
- hash.set now does auto hold the value;
- @ operator changed a bit;
- math functions now can receive endless amount arguments;
- string functions now can receive endless arguments;
- list functions now can receive endless arguments;
- new function mem_swap;
- new function mem_sector_swap;
- new type TYPE_RAW;
- pointers as printed as integer now instead of hex;
- std_string_split fixed;
- std_string_format extended;
- added configurable EXCLUDE to build.sh and build-debug.sh;
- new lib raw.c;
- new function raw_byte_set;
- new function raw_byte_get;
- new function raw_byte_add;
- new function raw_byte_sub;
- new function raw_integer_add;
- new function raw_integer_sub;
- new function raw_integer_mul;
- new function raw_integer_div;
- new function raw_integer_mod;
- new function raw_from_float;
- new function raw_to_float;
- new function raw_from_string;
- new function raw_to_string;
- new function raw_from_bytes;

(28/10/2024) - version 0.6.1

- @ operator can now be used to get a segment of the stack, @: will get the whole stack, @:5 will get the first 5 elements, @5: will get all elements from the 5th to the end, @5:10 will get all elements from the 5th to the 10th;
- some fixes;
- new function use_var;
- new function mem_use;
- new function mem_unuse;
- new function mem_segment_new;
- new function mem_segment_copy;
- fixed repl end message;
- renamed mem_edit to mem_set;

(27/10/2024) - version 0.6.0

- some README updates;
- no more prototypes;
- some fixes;
- some optimizations;
- repl doesnt seg fault when try to call a non existent function anymore;
- new folder libr/ for bruter libraries;
- new file libr/lazy.br;
- new file example/functions.br;
- new function std_do, a replacement for std_function, works like eval, but create a list with the arguments;
- new function os_file_delete;
- new function os_file_exists;
- new function os_file_rename;
- new function os_file_copy;
- new function os_file_size;
- new function byte_edit;
- new function byte_get;
- fixed list.remove;
- moved all memory related functions to mem.c;
- renamed std_file_read to os_file_read;
- renamed std_file_write to os_file_write;
- renamed std_include to os_dofile;
- renamed std_repl to os_repl;
- renamed std_process_fork to os_process_fork;
- renamed std_process_terminate to os_process_terminate;
- renamed std_process_host_send to os_process_host_send;
- renamed std_process_host_receive to os_process_host_receive;
- renamed std_process_child_send to os_process_child_send;
- renamed std_process_child_receive to os_process_child_receive;

(26/10/2024) - version 0.5.9c

- lists are back;
- removed array.c;

(24/10/2024) - version 0.5.9b

- type.array is now a thing;
- removed integer.c;

(23/10/2024) - version 0.5.9a

- some fixes;
- some optimizations;
- less allocations;

(22/10/2024) - version 0.5.9

- arduino related fixes;
- removed TYPE_LIST;
- removed TYPE_FUNCTION;
- lists are not a std type anymore;
- functions are not a std type anymore;
- removed all list related functions;
- removed all function related functions;
- renamed function std_io_ls to std_io_ls_all;
- new function std_io_ls_temp;
- new function std_io_ls_free;
- new function std_io_ls_type;
- new function std_io_ls_hash;
- new function array_new;
- new function array_fill;
- new function array_set;
- new function array_get;
- new function array_length;
- new function array_resize;
- mew lib array.c;
- new lib integer.c;
- new lib prototype.c;
- reworked string.split to use array instead of list;
- prototype moved into separated library apart std;
- some examples updated;
- some README updates;

(19/10/2024) - version 0.5.8b

- new function mem.copy;
- TYPE_OTHER is not automatically unallocated anymore, you must do it manually dependending on your use;
- moved process_t to os.c;
- Value.process is no more;
- minor fixes;

(19/10/2024) - version 0.5.8a

- new function registerBuiltin;
- new function registerFunction;
- new function registerNumber;
- new function registerString;
- new function registerList;
- new library lib/example.c added;

(19/10/2024) - version 0.5.8

- new build system;
- build.sh updated;
- lib system implemented, now is simple to bundle native functions with the interpreter(see lib/);
- removed pthreads and everything related to it, we need to keep it simple, btw, now is very easy to implement it as an native lib if the user need so;
- removed TYPE_THREAD;
- removed TYPE_PROCESS, use TYPE_OTHER instead;
- as those types are no more a part of the language, they cannot be automatically unallocated by the interpreter anymore, so you must do it manually using lib specific specific functions;

(10/10/2024) - version 0.5.7d

- some thread related leaks fixed;

(09/10/2024) - version 0.5.7c

- some new examples;
- some threads related leaks fixed;

(07/10/2024) - version 0.5.7b

- removed function std_thread_await;
- renamed std_thread_join to std_thread_await;
- arduino file updated and tested.
- new function std_thread_transfer_push;
- new function std_thread_transfer_unshift;
- new function std_thread_transfer_shift;
- new function std_thread_transfer_pop;
- new function std_thread_transfer_insert;
- new function std_thread_transfer_remove;

(04/10/2024) - version 0.5.7a

- some minor fixes;
- some README updates;
- renamed create_process to fork_process;
- moved std_thread functions to std_os, not linux exclusive anymore(unlike std_process);

(03/10/2024) - version 0.5.7

- some README updates;
- new function permanent_thread;
- new function thread_destroy;
- new function make_thread_arg;
- new function std_thread_send;
- new function std_thread_join;
- new function std_thread_await;
- new function std_thread_create;
- new function std_thread_destroy;
- renamed std_process_terminate to std_process_destroy;
- renamed terminate_process to process_destroy;
- will implement a std way to get values from threads next;

(29/09/2024) - version 0.5.6

- some README updates;
- removed std_get;
- reintroduced @ operator, but direct reference to indexes;
- new function init_hash;
- new function std_hash_set;
- new function std_hash_get;
- new function std_hash_delete;
- new function std_type_set;
- new function std_type_get;
- new function std_loop_repeat;
- new function std_loop_while;
- new function std_mem_hold;
- new function std_mem_unhold;
- new function std_mem_keep;
- new function std_mem_rebase;
- new function std_mem_clear;
- new function std_mem_edit;
- new function std_mem_collect;
- new function std_mem_length;
- new function std_mem_delete;
- new function std_list_set;
- new function std_string_to_number;
- new function std_process_await;
- new variable type.size;
- new variable type.nil;
- new variable type.number;
- new variable type.string;
- new variable type.list;
- new variable type.function;
- new variable type.builtin;
- new variable type.process;

(27/09/2024) - version 0.5.5a

- removed function std_include;
- build.sh now compiles the static bruter library also;
- compiled files now go on build/ instead of bin/;

(27/09/2024) - version 0.5.5

- some README updates;
- some vscode extension updates(belive it or not);
- new function std_string_format;
- new function str_replace_all;
- new function std_string_replace_all;
- new function std_repeat;

(26/09/2024) - version 0.5.4b

- fixed some memory leaks in multiprocessing;
- no more exec's, everything is freed properly now;
- process.fork can now receive a string as the process name, if a name provided it wont return the process;
- process.fork now check if it is in child;

(26/09/2024) - version 0.5.4a

- some README updates;
- deleted multiprocess.c;
- new file std_linux.c;
- new function init_linux;
- moved all multiprocess.c functions to std_linux.c;

(26/09/2024) - version 0.5.4

- renamed TYPE_OTHER to TYPE_PROCESS;
- new file std_os.c
- new file multiprocess.c
- new struct process_t;
- new function init_std_os;
- new function fork_process;
- new function terminate_process;
- new function send_dynamic_string;
- new function receive_dynamic_string;
- new function std_process_fork;
- new function std_process_terminate (avoid it, prefer std_delete);
- new function std_process_host_send;
- new function std_process_host_receive;
- new function std_process_child_send;
- new function std_process_child_receive;
- moved std functions that dont work on arduino to std_os; 
- moved std file functions to std_os;
- added a pointer to process type in the Value union;
- the multiprocess is not meant to be used on arduino, if on windows you will need to compile with cygwin or such, because of the fork function;

(23/09/2024) - version 0.5.3

- new function collect_garbage;
- new function std_collect, use it just when you lose a held variable;
- new function std_math_increment;
- new function std_math_decrement;
- benchmark/ created under example/;
- single quotes are now allowed as string delimiter;

(22/09/2024) - version 0.5.2

- prototype library added(experimental);
- new function std_prototype_copy;
- new function std_prototype_compare;
- new function std_prototype_hold;
- new function std_prototype_unhold;
- new function std_import(standalone only);
- minor leak fixed;
- renamed std_rm to std_delete;

(21/09/2024) - version 0.5.1a

- some README updates;
- added a condition to prevent the interpreter from crashing after unusing a temp variable;

(21/09/2024) - version 0.5.1

- renamed TYPE_FUNCTION to TYPE_BUILTIN;
- renamed spawn_function to spawn_builtin;
- created TYPE_FUNCTION for functions written in bruter;
- new function spawn_function for functions written in bruter;
- new function print_element;
- new function std_function;
- simplified function std_print;
- simplified function std_ls;

(18/09/2024) - version 0.5.0a

- TYPES order reorganized;
- removed TYPE_ERROR;

(17/09/2024) - version 0.5.0

- some README updates;
- some changes made in std_edit to prevent memory leaks;
- vm.empty renamed to vm.unused;
- TYPE_UNUSED removed;
- removed function std_sweep;
- removed function std_loop_repeat;
- removed "!" operator;
- renamed "~=" operator to "!=";
- renamed std_loop_while to std_while;
- renamed std_comment to std_ignore, "//" operator to "#";
- string is now delimited with double quotes;
- interpreter does not deallocate unused args anymore;

(16/09/2024) - version 0.4.9a

- build.sh renamed to build-debug.sh;
- created build.sh;

(15/09/2024) - version 0.4.9

- everything is temporary now unless specified;
- created a "exists" file in bin to ensure that the bin folder exists;
- created TYPE_OTHER to handle unknown types;
- TYPE_POINTER and all related stuff were removed;
- added a integer parameter to the Value union;
- removed temp operator ($);
- removed pointer operator (@);
- some conditions related fixes;
- spawn functions now return the index;
- new function hold_var and std_hold;
- new function unhold_var and std_unhold;

(12/09/2024) - version 0.4.8c

- some README updates;
- removed function std_new;
- removed function std_temp;
- renamed function std_print to std_io_print;
- renamed function std_ls to std_io_ls;

(11/09/2024) - version 0.4.8b

- new function std_loop_while;
- new function std_loop_repeat;
- new function std_edit;
- new function std_change;
- fixed some condition related bugs;

(10/09/2024) - version 0.4.8a

- created a new ls argument, "temp", that lists all temp variables;
- std_delete renamed to std_rm;
- new function std_size;
- new function std_sweep;
- new function std_rebase;

(09/09/2024) - version 0.4.8

- some README updates;
- specialSplit renamed to special_space_split;
- added a new function special_split which splits by a given char;
- fixed string splitters;
- fixed eval function;
- all functions were renamed from pascalCase to snake_case for consistency and better readability;
- Variable type and everything related to it was removed;
- VariableList type and everything related to it was removed;
- List type renamed to ValueList;
- specific Int and Float types macros for specific architeture were added;
- removed bruter.txt;

(09/09/2024) - version 0.4.7

- functions will now get indexes instead of Variables;
- added temp variables;
- added temp and clear function;
- added temp operator "$";

(07/09/2024) - version 0.4.6a 

- fixed "set" function related leaks;
- created this file;